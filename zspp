#!/usr/bin/env luajit
--[[
usage: zsc infile.zs outfile.zsc

A simple ZScript preprocessor.
It supports the following features:

  #namespace foo::bar
all code after this directive will be considered to be in the "foo::bar" namespace
  ::baz
expands to "foo::bar::baz"
the double colons are converted into single underscores at compile time.

  #include "./bar"
the leading . is converted into the dirname of the file as passed on the command line,
on the assumption that you are running this tool from the wadroot and passing it
relative paths.

  DEBUG(...)
if the ZSC_DEBUG environment variable is defined, expands to console.printf(...);
otherwise is completely elided.
]]

local src,dst = ...
local dirname = src:gsub('[^/]+$', '')

local lines = {}
local ns = nil

for line in io.lines(src) do
  if line:match('^#namespace') then
    ns = assert(line:match('^#namespace (%S+);'), "malformed namespace directive: "..line)
  elseif line:match('^#include "%./(.*)"') then
    path = line:match('^#include "%./(.*)"')
    line = ('#include "%s%s"'):format(dirname, path)
    table.insert(lines, line)
  elseif line:match('::') and ns then
    line = line
      :gsub('(%W)::', '%1'..ns)
      :gsub('(%w)::', '%1_')
    table.insert(lines, line)
  else
    table.insert(lines, line)
  end
end

table.insert(lines, '')
src = table.concat(lines, '\n')
if os.getenv('ZSC_DEBUG') then
  src = src:gsub('DEBUG(%b())', 'console.printf%1')
else
  src = src:gsub('DEBUG%b()%s*', '')
end

dst = assert(io.open(dst, 'wb')):write(table.concat(lines, '\n'))
