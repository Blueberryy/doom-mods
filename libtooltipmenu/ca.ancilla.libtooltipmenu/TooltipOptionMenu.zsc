// TooltipOptionsMenu -- a drop-in replacement for OptionsMenu with tooltip support.
// Released under the MIT license; see COPYING.md for details.
//
// To use this, declare your option menu in MENUDEF as normal, but add:
//   class TF_TooltipOptionMenu
// to it. You can then use the "Tooltip", "TooltipBlockStart", and "TooltipBlockEnd"
// menu items, as in the following example:
//
// OptionMenu "ExampleTooltipOptions"
// {
//   class TFLIB_TooltipOptionMenu
//   Title "Example Tooltip Menu"
//
//   Slider "Kitten Amount", "sv_kitten_amount", 0, 100, 1, 0
//   Tooltip "The number of kittens to spawn."
//
//   Option "Spicy Kittens", "sv_kitten_spicy", "YesNo"
//   Tooltip "Whether kittens are spicy or not."
//   Tooltip "I don't know what that means, but isn't this multiline tooltip cool?"
//   Tooltip "Tooltips support \c[GREEN]escape sequences\c-, too."
//
//   TooltipBlockStart
//   Slider "Kitten Min Rating", "sv_kitten_min_rating", 1, 10, 1, 0
//   Slider "Kitten Max Rating", "sv_kitten_min_rating", 1, 10, 1, 0
//   Tooltip "Min/max ratings (out for 10) for kittens. Setting this to values other than 10 may destroy the fabric of spacetime."
//   Tooltip "The TooltipBlockStart/End means this tooltip sticks to both of the above Sliders."
//   TooltipBlockEnd
// }

class TF_TooltipOptionMenu : OptionMenu {
  array<string> tooltips;

  override void Init(Menu parent, OptionMenuDescriptor desc) {
    super.Init(parent, desc);

    // Steal the descriptor's list of menu items, then rebuild it containing
    // only the items we want to display.
    array<OptionMenuItem> items;
    items.Move(desc.mItems);

    // Start of tooltip block, i.e. index of the topmost menu item the next
    // tooltip will attach to.
    int startblock = -1;
    // Whether we're building a run of tooltips or processing non-tooltip menu
    // items.
    bool tooltip_mode = true;
    for (uint i = 0; i < items.size(); ++i) {
      if (items[i] is "OptionMenuItemTooltip") {
        let tt = OptionMenuItemTooltip(items[i]);
        if (tt.tooltip == "" && !tooltip_mode) {
          // Explicit marker that the above items should have no tooltips.
          startblock = desc.mItems.size();
        } else {
          AddTooltip(startblock, desc.mItems.size()-1, tt.tooltip);
          tooltip_mode = true;
        }
      } else {
        if (tooltip_mode) {
          // Just finished a run of tooltips.
          startblock = desc.mItems.size();
          tooltip_mode = false;
        }
        desc.mItems.push(items[i]);
      }
    }
  }

  void AddTooltip(uint first, uint last, string tooltip) {
    if (first < 0) ThrowAbortException("Tooltip must have at least one menu item preceding it!");
    while (tooltips.size() <= last) {
      tooltips.push("");
    }
    for (uint i = first; i <= last; ++i) {
      if (tooltips[i].length() > 0) {
        tooltips[i] = tooltips[i].."\n"..tooltip;
      } else {
        tooltips[i] = tooltip;
      }
    }
  }

  override void Drawer() {
    super.Drawer();
    let selected = mDesc.mSelectedItem;
    if (selected >= 0 && selected < tooltips.size() && tooltips[selected].length() > 0) {
      DrawTooltip(tooltips[selected]);
    }
  }

  // TODO: support for arbitrary positioning & background textures using a
  // TooltipConfig menu pseudoitem.
  void DrawTooltip(string tt) {
    let lines = newsmallfont.BreakLines(tt, screen.GetWidth()/3);
    let lh = newsmallfont.GetHeight();
    for (uint i = 0; i < lines.count(); ++i) {
      screen.DrawText(
        newsmallfont, Font.CR_WHITE,
        newsmallfont.GetCharWidth(0x20), lh/2+i*lh, lines.StringAt(i));
    }
  }
}

class OptionMenuItemTooltip : OptionMenuItem {
  string tooltip;

  OptionMenuItemTooltip Init(string tooltip) {
    self.tooltip = tooltip.filter();
    super.init("", "");
    return self;
  }
}
