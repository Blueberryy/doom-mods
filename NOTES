# Laevis design notes

Weapons gain XP as you deal damage with them (kills don't matter), and level up once they have enough XP. Higher level weapons level up slower. This means you don't have an incentive to weaken enemies with your favourite weapon and then switch guns for the killshot, and also encourages you to spread the XP around by using a variety of weapons.

On level up a weapon gets a random ability from the Legendoom ability pool for its type and rarity. High-rarity weapons can draw low-rarity abilities, but not vice versa. Legendoom has already done all the work of coming up with cool well-balanced abilities for each weapon slot; I'm not going to be able to improve on that.

Weapons have a max number of ability slots based on their rarity (1 for normal doom weapons, 5 for legendary). Coupled with the "rarer weapons have a broader and more powerful ability pool" above, this gives you an incentive to trade up for rarer weapons as you find them; I don't want a design where the super-cool legendary rocket launcher the spider mastermind just dropped is actually not as good as the uncommon rocket launcher you picked up in MAP04 and have been hauling around ever since. Being able to have multiple abilities per weapon is something that Legendoom is not balanced around, but part of the fun of WoA is just getting absolutely bonkers powerful and seeing the game scale up to keep pace; LD already has scaling difficulty options, so if that makes it too easy the mitigation is probably just to tweak those to scale more aggressively.

If all of a weapon's slots are full, you can choose an existing ability to overwrite, or discard the new ability. WoA just keeps adding more abilities to each weapon as it levels up endlessly, and when it runs out of interesting abilities it just starts stacking damage bonuses on with each level. I like this more, though. If you choose "discard" perhaps it gives you some bonus XP towards the next level, or some health/armour/ammo, or something as a consolation prize?

If you find a weapon on the ground that already has abilities (e.g. by killing a legendary monster), you can swap it out as normal, or you can choose one ability from it to graft onto your existing weapon in that slot. This destroys the weapon. This means that weapon drops you don't want to outright replace your current weapon with aren't useless, and if you do want to replace your current weapon you can choose your favourite ability from it to carry with you. I'm also toying with the idea of letting you eat legendary/unique weapons to add slots to your existing guns.

Maybe: the player gains XP as they do damage, and on level up gets one of:
- +1 max HP
- +1 min HP or armour (regenerate to this point when out of combat)
- +1% damage dealt
- -1% damage received
up to some maximum? Make it a separate XP bar rather than one-level-per-weapon-level to discourage constantly dropping and picking weapons back up.

## Release stages

Stage 1 -- damage and level tracked per weapon and per player. No gameplay effects.
Stage 2 -- player level ups confer permanent bonuses.
Stage 3 -- weapon level ups let you reroll in Legendoom and pick which one you prefer. Enough levelups let you reroll on a higher tier.
Stage 4 -- weapon levels stick to dropped weapons.
Stage 5 -- multiple effects per weapon?

# Implementation notes for doing it as an addon to LD

## Adding new properties

Ideally we'd subclass existing classes and add new properties to them. However, Legendoom has its own classes and lots of code references them. I thiiiink if we just do something like "Actor LVLDBFG9000 : LDBFG9000 replaces LDBFG9000" it'll work? And then we can have a mixin that adds the actual fancy stuff.

We also need new properties for the base weapons, since those are meant to be able to level up as well.

It looks like any Actor, including weapons, can contain inventory items; that's also a possible way to do this.

## LD architecture notes

Using Pistol here for illustration, but other weapons follow the same pattern.

Legendoom adds LDPistol as the weapon in hand and LDPistolPickup as the item on ground. There's also LDPistolPickupLegendary for the legendary version (which gets a random effect when spawned, by giving it an LDPistolRandomLegendary item), and LDPistolPickupDroppedLegendary, which is the version used when dropped from your inventory and is the same except without getting the random effect on spawn.

Effects are stored in the player's inventory:
- LDPistolEffectActive shows that you have a legendary pistol
- LDPistolLegendary(Common|Uncommon|Rare|Epic) shows what rarity it is
- LDPistolEffect_Foo shows that you have effect Foo on the pistol

When you pick up an LDPistolPickupLegendary, the effects in it are transferred to the player, because it has the +INVENTORY.TRANSFER flag set.

When you drop a weapon, and you have the PistolEffectActive effect in inventory:
- it spawns an LDPistolPickupDroppedLegendary item
- it gives it copies of LDPistolEffectActive, LDPistolLegendary$RARITY, and the *first* LDPistolEffect_* effect it finds in your inventory
- it clears all LDPistol forces from your inventory
This means the rarity will be carried over correctly but only the first special ability will stick to it.

Specifically:
- check if you have LDPistolEffectActive
  - if not, drop a normal pistol
- spawn an LDPistolPickupDroppedLegendary item
- wait one tic
- do the copy described above
- spawn the remover

pThe spawned item waits FOUR tics before clearing the parent/child relationship with the player, so we can have our new remover move everything over.

## LVLD handlers and stuff

On damage:
- increment player XP
  - if >= level threshhold, increment level, apply level-up bonus, subtract level threshold from XP and set new threshold
- increment weapon XP
  - if >= level threshold, increment level, subtract threshold from XP, set new threshold, and maybe give bonus (see below)

To give bonus:
- if the weapon is basic and already has an effect:
  - do nothing
- choose a random effect appropriate to the weapon rarity (maybe we can give LDPistolRandomLegendary to a temporary actor and see what items it ended up with, rerolling if we get something too good for the item?)
- if the effect is a duplicate of one we already have:
  - reroll
- if it's mutually exclusive with one we already have:
  - ask which one to keep
  - if they answer "the old one", do nothing
  - if they answer "the new one", remove the old one from their inventory and add the new one
- if the number of effects they have exceeds the number of slots for that weapon:
  - list all effects for that weapon and ask which one they want to keep
  - see mutual exclusion above
- else give them the effect

On drop weapon:
- BEFORE the remover goes and removes all the effects, copy ALL of the effects into the dropped weapon
  Maybe we can do this by subclassing the weapons and overriding the RemoveWeapon state so that we go through and copy all the things before it spawns the remover? Or by replacing the remover

## Possibly useful event handlers

WorldThingDamaged, called when damage is done -- note that we want "source" for the damage source, "inflictor" is going to be the missile/puff/etc.
WorldThingSpawned, called when an Actor is spawned


## Player-level upgrades

- +damage with all weapons (percent or flat)
- life/armour/ammo leech
- max health
- resistance
- life/armour regeneration out of combat?

## Weapon-level upgrades

These all have to be possible without subclassing, so this is kind of spitballing; some of these may not be feasible to implement.
I think that we have access to the projectile at creation time (via WorldThingSpawned) and the projectile/puff at damage time (via ModifyDamage and/or WorldThingDamaged).

! infeasible

Basic "number go up" upgrades:
- damage (flat or %)
  apply in ModifyDamage
! ROF
  requires modifying state info
! accuracy (only if below a certain accuracy threshold)
  requires modifying calls to fire functions; there is an Accuracy prop but it
  doesn't do anything without custom code (except in Strife)
- knockback
  weapon kickback & projectilekickback property
! # of hits per shot (burst only)
  probably infeasible since this is set in A_CustomBulletAttack; might be able
  to get attack vector and synth additional shots?
! reach (melee only)
  requires changing A_Saw
- projectile speed (projectile only)
  set speed property on projectile in WorldThingSpawned

More complicated upgrades:
- bouncy shots (proj. only)
  set BounceType/BounceFactor/BounceCount in WorldThingSpawned
! homing shots (proj. only)
  requires modifying projectile update loop
- penetrating shots
  set Ripper/RipperLevel in WorldThingSpawned for projectiles; for hitscans,
  get the attack vector (how?) and then call A_CustomRailgun
- explosion on hit/kill
  call A_Explode() and spawn and explosion on impact or in WorldThingKilled
- shrapnel on hit/kill
  as above but use the "# of nails" argument to A_Explode()
- AoE stun
  Use A_Explode and then have a custom damage handler? Spawn some kind of explosion actor?
- submunitions in flight
  Spawn() or use A_ThrowGrenade(), needs custom class definition for submunition
- submunitions on impact
  as above
- turns enemies into friends
  set FRIENDLY flag when damage threshold reached or w/e
- health/armour/ammo leech
  in ModifyDamage

Elemental upgrades:
- all of these would work by putting something in the target's inventory with a
  custom HandlePickup (to handle stacking) and state loop (to apply the DOT). Also
  need to figure out a way to add particle effects or something to indicate what
  effects are happening.
- poison (DoT, stacks increase both damage and duration)
  gzDoom has an existing poison effect but I might want to roll my own
- bleeding (DoT, damage based on initial hit, subsequent hits reset duration)
- fire (DoT, damage falls off as health reduces, subsequent hits increase speed)
- acid (DoT, damage *increases* as health reduces, subsequent hits increase duration)
- lightning (stuns enemy briefly)
- ice (slows enemy briefly, stacks increase duration)

## Applying upgrades

In WorldThingSpawned we can detect projectile spawnings (look for target=player and bMISSILE flag) and there we can apply stuff like ripper, bouncy, etc. We can't modify damage, though.

We can't do that for hitscan weapons because the puff spawns AFTER damage is applied, so probably we need to use ModifyDamage or WorldThingDamaged. ModifyDamage works for projectiles, hitscans, and DoTs like poison.

