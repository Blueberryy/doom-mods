# Laevis design notes

Weapons gain XP as you deal damage with them (kills don't matter), and level up once they have enough XP. Higher level weapons level up slower. This means you don't have an incentive to weaken enemies with your favourite weapon and then switch guns for the killshot, and also encourages you to spread the XP around by using a variety of weapons.

On level up a weapon gets a random ability from the Legendoom ability pool for its type and rarity. High-rarity weapons can draw low-rarity abilities, but not vice versa. Legendoom has already done all the work of coming up with cool well-balanced abilities for each weapon slot; I'm not going to be able to improve on that.

Weapons have a max number of ability slots based on their rarity (1 for normal doom weapons, 5 for legendary). Coupled with the "rarer weapons have a broader and more powerful ability pool" above, this gives you an incentive to trade up for rarer weapons as you find them; I don't want a design where the super-cool legendary rocket launcher the spider mastermind just dropped is actually not as good as the uncommon rocket launcher you picked up in MAP04 and have been hauling around ever since. Being able to have multiple abilities per weapon is something that Legendoom is not balanced around, but part of the fun of WoA is just getting absolutely bonkers powerful and seeing the game scale up to keep pace; LD already has scaling difficulty options, so if that makes it too easy the mitigation is probably just to tweak those to scale more aggressively.

If all of a weapon's slots are full, you can choose an existing ability to overwrite, or discard the new ability. WoA just keeps adding more abilities to each weapon as it levels up endlessly, and when it runs out of interesting abilities it just starts stacking damage bonuses on with each level. I like this more, though. If you choose "discard" perhaps it gives you some bonus XP towards the next level, or some health/armour/ammo, or something as a consolation prize?

If you find a weapon on the ground that already has abilities (e.g. by killing a legendary monster), you can swap it out as normal, or you can choose one ability from it to graft onto your existing weapon in that slot. This destroys the weapon. This means that weapon drops you don't want to outright replace your current weapon with aren't useless, and if you do want to replace your current weapon you can choose your favourite ability from it to carry with you. I'm also toying with the idea of letting you eat legendary/unique weapons to add slots to your existing guns.

Maybe: the player gains XP as they do damage, and on level up gets one of:
- +1 max HP
- +1 min HP or armour (regenerate to this point when out of combat)
- +1% damage dealt
- -1% damage received
up to some maximum? Make it a separate XP bar rather than one-level-per-weapon-level to discourage constantly dropping and picking weapons back up.

## Release stages

Stage 1 -- damage and level tracked per weapon and per player. No gameplay effects.
Stage 2 -- player level ups confer permanent bonuses.
Stage 3 -- weapon level ups let you reroll in Legendoom and pick which one you prefer. Enough levelups let you reroll on a higher tier.
Stage 4 -- weapon levels stick to dropped weapons.
Stage 5 -- multiple effects per weapon?

# Implementation notes for doing it as an addon to LD

## Adding new properties

Ideally we'd subclass existing classes and add new properties to them. However, Legendoom has its own classes and lots of code references them. I thiiiink if we just do something like "Actor LVLDBFG9000 : LDBFG9000 replaces LDBFG9000" it'll work? And then we can have a mixin that adds the actual fancy stuff.

We also need new properties for the base weapons, since those are meant to be able to level up as well.

It looks like any Actor, including weapons, can contain inventory items; that's also a possible way to do this.

## LD architecture notes

Using Pistol here for illustration, but other weapons follow the same pattern.

Legendoom adds LDPistol as the weapon in hand and LDPistolPickup as the item on ground. There's also LDPistolPickupLegendary for the legendary version (which gets a random effect when spawned, by giving it an LDPistolRandomLegendary item), and LDPistolPickupDroppedLegendary, which is the version used when dropped from your inventory and is the same except without getting the random effect on spawn.

Effects are stored in the player's inventory:
- LDPistolEffectActive shows that you have a legendary pistol
- LDPistolLegendary(Common|Uncommon|Rare|Epic) shows what rarity it is
- LDPistolEffect_Foo shows that you have effect Foo on the pistol

When you pick up an LDPistolPickupLegendary, the effects in it are transferred to the player, because it has the +INVENTORY.TRANSFER flag set.

When you drop a weapon, and you have the PistolEffectActive effect in inventory:
- it spawns an LDPistolPickupDroppedLegendary item
- it gives it copies of LDPistolEffectActive, LDPistolLegendary$RARITY, and the *first* LDPistolEffect_* effect it finds in your inventory
- it clears all LDPistol forces from your inventory
This means the rarity will be carried over correctly but only the first special ability will stick to it.

Specifically:
- check if you have LDPistolEffectActive
  - if not, drop a normal pistol
- spawn an LDPistolPickupDroppedLegendary item
- wait one tic
- do the copy described above
- spawn the remover

pThe spawned item waits FOUR tics before clearing the parent/child relationship with the player, so we can have our new remover move everything over.

## LVLD handlers and stuff

On damage:
- increment player XP
  - if >= level threshhold, increment level, apply level-up bonus, subtract level threshold from XP and set new threshold
- increment weapon XP
  - if >= level threshold, increment level, subtract threshold from XP, set new threshold, and maybe give bonus (see below)

To give bonus:
- if the weapon is basic and already has an effect:
  - do nothing
- choose a random effect appropriate to the weapon rarity (maybe we can give LDPistolRandomLegendary to a temporary actor and see what items it ended up with, rerolling if we get something too good for the item?)
- if the effect is a duplicate of one we already have:
  - reroll
- if it's mutually exclusive with one we already have:
  - ask which one to keep
  - if they answer "the old one", do nothing
  - if they answer "the new one", remove the old one from their inventory and add the new one
- if the number of effects they have exceeds the number of slots for that weapon:
  - list all effects for that weapon and ask which one they want to keep
  - see mutual exclusion above
- else give them the effect

On drop weapon:
- BEFORE the remover goes and removes all the effects, copy ALL of the effects into the dropped weapon
  Maybe we can do this by subclassing the weapons and overriding the RemoveWeapon state so that we go through and copy all the things before it spawns the remover? Or by replacing the remover

## Possibly useful event handlers

WorldThingDamaged, called when damage is done -- note that we want "source" for the damage source, "inflictor" is going to be the missile/puff/etc.
WorldThingSpawned, called when an Actor is spawned


## Player-level upgrades

- life/armour/ammo leech
- max health
- life/armour regeneration out of combat?

## Weapon-level upgrades

These all have to be possible without subclassing, so this is kind of spitballing; some of these may not be feasible to implement.
I think that we have access to the projectile at creation time (via WorldThingSpawned) and the projectile/puff at damage time (via ModifyDamage and/or WorldThingDamaged).

! infeasible

Basic "number go up" upgrades:
! ROF
  requires modifying state info
! accuracy (only if below a certain accuracy threshold)
  requires modifying calls to fire functions; there is an Accuracy prop but it
  doesn't do anything without custom code (except in Strife)
- knockback
  weapon kickback & projectilekickback property
  will need some tuning (a value of 500 gives noticeable but not excessive kickback to the pistol)
  needs to be applied before the gun fires, so we need some kind of ApplyUpgradesToWeapon(wpn)
  call we can call after LevelUp
! # of hits per shot (burst only)
  probably infeasible since this is set in A_CustomBulletAttack; might be able
  to get attack vector and synth additional shots?
! reach (melee only)
  requires changing A_Saw

More complicated upgrades:
- bouncy shots (proj. only)
  set BounceType/BounceFactor/BounceCount in WorldThingSpawned
- penetrating shots
  set Ripper/RipperLevel in WorldThingSpawned for projectiles; for hitscans,
  get the attack vector (how?) and then call A_CustomRailgun
- explosion on hit/kill
  call A_Explode() and spawn and explosion on impact or in WorldThingKilled
- shrapnel on hit/kill
  as above but use the "# of nails" argument to A_Explode()
- AoE stun
  Use A_Explode and then have a custom damage handler? Spawn some kind of explosion actor?
- submunitions in flight
  Spawn() or use A_ThrowGrenade(), needs custom class definition for submunition
- submunitions on impact
  as above
- turns enemies into friends
  set FRIENDLY flag when damage threshold reached or w/e
- health/armour/ammo leech
  in OnDamageDealt

Elemental upgrades:
- bleeding (DoT, damage based on initial hit, subsequent hits reset duration?)
  enemies with blood only (-NOBLOOD). -- this means it'll effect everything in Doom
  but be less effective in (say) Strife?
  maybe shelve this until I can nail the design down more
- acid (DoT, damage *increases* as health reduces, subsequent hits increase duration)
  does nothing at full health, damage increases as target loses health
  more hits do not increase damage but do increase duration
- lightning (stuns enemy briefly)
  put an item in the inventory that keeps forcing them into their "pain" state every tic
! ice (slows enemy briefly, stacks increase duration)
  stun/slow turn out to be really hard!

Upgrades inspired by DoomRL:
- increase max health
- increased speed
- flat or % damage reduction
- flat or % damage increase
- fast weapon switching
- berserk after successful hits/kills
- show secrets/monsters/items/etc on map
- lifeleech
- massive damage resistance when wielding melee
- damage type modifications (e.g. shrapnel -> AP)
- ammoleech (on kill?)
- damage resistance while firing

## Elemental upgrade redesign

Elements are mutually exclusive with each other. Each one has base, upgrade, and capstone options.
Possible alternate design: both later-tier upgrades are "capstone" and you can only choose one, probably with either a "better for single targets/better for crowd control" split or a "better for big guns/better for rapid fire" split.

So, something like:
- fire: spreads between enemies/burning enemies explode on death
  this has two crowd control upgrades
- poison: victim takes increased damage/poisons other enemies on death
- acid: victim takes increased damage/???
  this is a duplicate of poison
- lightning: damage bursts with each attack that applies new stacks/stacks stun nearby enemies as well

FIRE: does more damage to enemies at full health; total damage capped as a % of target's max health. Stacks increase damage rate but not total damage. Hard counter to regen/healing. Upgrade: damage cap increased. Masteries: fire spreads between enemies OR sufficiently burning enemies turn into fireworks
POISON: initially weak but both damage and duration increase as it stacks. Upgrade: poisoned enemies deal less damage. Masteries: dead enemies explode in a poison cloud OR enemies with enough poison to eventually kill them die instantly.
ACID: does damage faster as the target gets closer to death. Stacking increases duration and stack cap depends on weapon damage (so it benefits more from guns with powerful single shots). Upgrade: not sure yet. Masteries: attacking acidified enemies splashes acid on their surroundings OR acidified enemies take more damage from non-acid damage types.
LIGHTNING: no damage, but stuns the target by triggering their pain state. Upgrade: not sure yet. Masteries: softcapping lightning stacks starts damaging + stunning nearby enemies (but not applying stacks to them) OR enemies that die with enough lightning stacks rise as your minions.

maybe we have four different niches here:
- rapid fire single target
- high damage single target
- rapid fire crowd control
- high damage crowd control?

FIRE:
- for use against really durable enemies, or enemies with healing/regen
- does 50% HP in damage
- reignites on heal
- stacks: damage happens faster
- level: apply more stacks/stack softcap increased
- upgrade: min health to ignite reduced
- AoE capstone: fire spreads between enemies
- Single-target capstone: sufficiently on-fire enemies rocket into the sky and explode like fireworks

POISON:
- for use with rapid fire guns
- no damage cap but duration and damage fall off fast
- stacks: increases both damage and duration
- level: apply more stacks/stack softcap increased
- upgrade: victim does reduced damage?
- AoE capstone: dead enemies explode in a cloud of poison
- single-target capstone: if there's enough poison stacks to eventually kill the target, it dies instantly

ACID:
- for use with powerful single-shot guns
- damage increases as health drops, but increased damage uses up stacks faster
- so, total stack count corresponds to total damage dealt
- hard stack limit based on weapon damage, stacks applied also depends on damage
- level: apply more stacks/stack softcap increased
- upgrade: softcap at which damage starts happening increased?
- AoE capstone: damaging an acidified at max stacks target transfers stacks to nearby enemies instead
- single-target capstone: victim takes increased damage from non-acid attacks

LIGHTNING:
- no damage, but stuns target; more stacks == longer duration
- level: apply more stacks/stack softcap increased
- upgrade: attacks that apply lightning also do damage, or maybe attacks that DON'T apply lightning do bonus damage?
- AoE capstone: lightning nova that damages and stuns when certain stack-application breakpoints are reached
- single-target capstone: enemies killed with enough lightning stacks rise as your minions

## Applying upgrades

In WorldThingSpawned we can detect projectile spawnings (look for target=player and bMISSILE flag) and there we can apply stuff like ripper, bouncy, etc. We can't modify damage, though.

We can't do that for hitscan weapons because the puff spawns AFTER damage is applied, so probably we need to use ModifyDamage or WorldThingDamaged. ModifyDamage works for projectiles, hitscans, and DoTs like poison.

## Avoiding infinite recursion

So, say we have a weapon with the Fragmentation upgrade (shots release shrapnel on impact).

It has an OnDamageDealt() handler, called from WorldThingDamaged, which calls Explode() on the puff/projectile in the mode that causes it to spray shrapnel everywhere. As the shrapnel hits the surroundings, it calls WorldThingDamaged again, which spawns more shrapnel...

One way is just to say that OnDamageDealt can't trigger on any of the TFLV_* classes, and then tell it to use TFLV_ShrapnelPuff as the puff type or something -- but I think if we call Explode() in non-shrapnel mode the puff is the originator?

Probably what we need to do is repurpose some kind of flag and set it on actors as we process them, and other actors that we spawn?

Possibilities:
DONTMORPH (cannot be Polymorphed)
NOTDMATCH (don't spawn in deathmatch games)
INCOMBAT (strife flag used for the dialogue system)

## OnApply() based mods

This is stuff like knockback, increased health, etc that requires making a permanent change to the player or the weapon.
For these, we record a separate level and applied_level and default the latter to 0.
In OnApply(), we figure out how much is currently applied based on the applied_level, then apply the difference between that and the current level.
