## Roadmap

### Future

Remaining upgrades:
- Ignition
- max health increase
- Shoryuken
- explosive fragmentation
- micromissiles -- projectiles turn into micromissile swarms after a few tics of flight. How do we compute damage?
- add ammo capacity upgrade
  - walk player inventory and boost the MaxAmount and BackpackMaxAmount
  - requires OnApply support, probably
  - won't affect ammo types the player doesn't have yet
  - will be a player mod, so it should either be fairly powerful or get more powerful with time
  - we can use GetDefaultByType(ammoitem).MaxAmount to compute the base max amount
    and then confer bonuses based on that

Gameplay changes:
- do another pass over the prerequisites. Graph paper? submunitions/expldeath should mutex, for example
- add "eat weapons to gain their power" feature to LD integration
- Compatibility options:
  - health pickups: doom vs. laevis
  - armour pickups: doom vs. laevis
  - ammo pickups: based on player ammo vs. based on player weapon vs. based on level contents
  - ammo pickups: suppress ammo that has default pickup message
  - ammo pickups: suppress ammo with no spawn state

Internal changes:
- factor out some shared code like "spawn a helper actor and set its target pointer appropriately", "spawn an expanding ring of particle effects", "do something to everything within a given radius", etc.

UI changes:
- Pointing at an enemy should show you how many stacks of each debuff it has. We can
  use AimTarget to get the target under cursor. Note that AimTarget is play scope, so
  we can't call it from ui, I think.

Structural changes:
- split Laevis (legendoom integration) & Gun Bonsai (weapon leveling) into separate mods

## Splitting Laevis into its own mod

Laevis features:
- eat LD weapons to add their powers to your own weapon
- switch between powers

Gun Bonsai features:
- leveling up LD weapons adds new powers

## Damage numbers

http://www.doom2.net/single/weaponfaq.html has some useful values for attack rates, DPS, etc that can be used for balancing.

DPS: 22/88, 25, 68/147, 88, 159+220, 263
RPM: 120/480, 150, 58/42, 530, 106, 700

I really need to implement softcap support!

20% damage -> stacks with 35 stacks/second decay == 175 dps for steady state
5 stacks/second decay (using TickDot()) -> 25 dps for steady state

# Implementation notes for doing it as an addon to LD

## LD architecture notes

Using Pistol here for illustration, but other weapons follow the same pattern.

Legendoom adds LDPistol as the weapon in hand and LDPistolPickup as the item on ground. There's also LDPistolPickupLegendary for the legendary version (which gets a random effect when spawned, by giving it an LDPistolRandomLegendary item), and LDPistolPickupDroppedLegendary, which is the version used when dropped from your inventory and is the same except without getting the random effect on spawn.

Effects are stored in the player's inventory:
- LDPistolEffectActive shows that you have a legendary pistol
- LDPistolLegendary(Common|Uncommon|Rare|Epic) shows what rarity it is
- LDPistolEffect_Foo shows that you have effect Foo on the pistol

When you pick up an LDPistolPickupLegendary, the effects in it are transferred to the player, because it has the +INVENTORY.TRANSFER flag set.

When you drop a weapon, and you have the PistolEffectActive effect in inventory:
- it spawns an LDPistolPickupDroppedLegendary item
- it gives it copies of LDPistolEffectActive, LDPistolLegendary$RARITY, and the *first* LDPistolEffect_* effect it finds in your inventory
- it clears all LDPistol forces from your inventory
This means the rarity will be carried over correctly but only the first special ability will stick to it.

Specifically:
- check if you have LDPistolEffectActive
  - if not, drop a normal pistol
- spawn an LDPistolPickupDroppedLegendary item
- wait one tic
- do the copy described above
- spawn the remover

pThe spawned item waits FOUR tics before clearing the parent/child relationship with the player, so we can have our new remover move everything over.

## LVLD handlers and stuff

On damage:
- increment player XP
  - if >= level threshhold, increment level, apply level-up bonus, subtract level threshold from XP and set new threshold
- increment weapon XP
  - if >= level threshold, increment level, subtract threshold from XP, set new threshold, and maybe give bonus (see below)

To give bonus:
- if the weapon is basic and already has an effect:
  - do nothing
- choose a random effect appropriate to the weapon rarity (maybe we can give LDPistolRandomLegendary to a temporary actor and see what items it ended up with, rerolling if we get something too good for the item?)
- if the effect is a duplicate of one we already have:
  - reroll
- if it's mutually exclusive with one we already have:
  - ask which one to keep
  - if they answer "the old one", do nothing
  - if they answer "the new one", remove the old one from their inventory and add the new one
- if the number of effects they have exceeds the number of slots for that weapon:
  - list all effects for that weapon and ask which one they want to keep
  - see mutual exclusion above
- else give them the effect

On drop weapon:
- BEFORE the remover goes and removes all the effects, copy ALL of the effects into the dropped weapon
  Maybe we can do this by subclassing the weapons and overriding the RemoveWeapon state so that we go through and copy all the things before it spawns the remover? Or by replacing the remover

## Player-level upgrades

- life/armour/ammo leech
- max health
- life/armour regeneration out of combat?

## Weapon-level upgrades

These all have to be possible without subclassing, so this is kind of spitballing; some of these may not be feasible to implement.
I think that we have access to the projectile at creation time (via WorldThingSpawned) and the projectile/puff at damage time (via ModifyDamage and/or WorldThingDamaged).

! infeasible

Basic "number go up" upgrades:
! ROF
  requires modifying state info
! accuracy (only if below a certain accuracy threshold)
  requires modifying calls to fire functions; there is an Accuracy prop but it
  doesn't do anything without custom code (except in Strife)
- knockback
  weapon kickback & projectilekickback property
  will need some tuning (a value of 500 gives noticeable but not excessive kickback to the pistol)
  needs to be applied before the gun fires, so we need some kind of ApplyUpgradesToWeapon(wpn)
  call we can call after LevelUp
! # of hits per shot (burst only)
  probably infeasible since this is set in A_CustomBulletAttack; might be able
  to get attack vector and synth additional shots?
! reach (melee only)
  requires changing A_Saw

More complicated upgrades:
- shrapnel on hit/kill
  use the "# of nails" argument to A_Explode()
- AoE stun
  Use A_Explode and then have a custom damage handler? Spawn some kind of explosion actor?
- submunitions in flight
  Spawn() or use A_ThrowGrenade(), needs custom class definition for submunition
- submunitions on impact
  as above
- turns enemies into friends
  set FRIENDLY flag when damage threshold reached or w/e
- health/armour/ammo leech
  in OnDamageDealt

Upgrades inspired by DoomRL:
- increase max health
- increased speed
- fast weapon switching
- berserk after successful hits/kills
- show secrets/monsters/items/etc on map
- damage type modifications (e.g. shrapnel -> AP)
- ammoleech (on kill?)
- damage resistance while firing

## Elemental upgrade redesign

Elements are mutually exclusive with each other. Each one has base, upgrade, and capstone options.
Possible alternate design: both later-tier upgrades are "capstone" and you can only choose one, probably with either a "better for single targets/better for crowd control" split or a "better for big guns/better for rapid fire" split.

FIRE: does more damage to enemies at full health; total damage capped as a % of target's max health. Stacks increase damage rate but not total damage. Hard counter to regen/healing. Upgrade: damage cap increased. Masteries: fire spreads between enemies OR sufficiently burning enemies turn into fireworks
POISON: initially weak but both damage and duration increase as it stacks. Upgrade: poisoned enemies deal less damage. Masteries: dead enemies explode in a poison cloud OR enemies with enough poison to eventually kill them die instantly.
ACID: does damage faster as the target gets closer to death. Stacking increases duration and stack cap depends on weapon damage (so it benefits more from guns with powerful single shots). Upgrade: not sure yet. Masteries: attacking acidified enemies splashes acid on their surroundings OR acidified enemies take more damage from non-acid damage types.
LIGHTNING: no damage, but stuns the target by triggering their pain state. Upgrade: not sure yet. Masteries: softcapping lightning stacks starts damaging + stunning nearby enemies (but not applying stacks to them) OR enemies that die with enough lightning stacks rise as your minions.

Idea for per-weapon limitations:
- one element per weapon is easiest
- or two elements
- or: taking one element locks you into that until you claim a mastery for it, at which point you can choose a second element; getting that mastery unlocks a "dual mastery" upgrade appropriate to the two elements
- fire+acid: it burns (enemies with both flee)
- fire+lightning:
- fire+poison: constant pain effect
- acid+lightning: idk something about batteries?
- acid+poison:
- lightning+poison:
or, one set of dual-element supermasteries:
- ELEMENTAL BEAM, railgun attack that does no damage but copies dots on the enemy you just attacked to everything hit by the beam;
- ELEMENTAL BLAST, ditto but has a blast radius and is for projectiles;
- ELEMENTAL WAVE, as BLAST but for melee weapons

LIGHTNING:
- no damage, but stuns target; more stacks == longer duration
- level: apply more stacks/stack softcap increased
- upgrade: attacks that apply lightning also do damage, or maybe attacks that DON'T apply lightning do bonus damage? attacks release ball lightning?
- AoE capstone: lightning nova that damages and stuns when certain stack-application breakpoints are reached
- single-target capstone: enemies killed with enough lightning stacks rise as your minions

Ok, after playing Amid Evil for a while and meditating on the concept of lightning, I have a reworked design for the shock tree, tentatively planned for v0.7:
- Lightning Inscription: attacks do no extra damage but stun enemies. Stun duration per hit scales with damage, max stun duration scales with upgrade level.
- Reanimation: enemies killed with lightning stacks on them have a chance to rise as your minions.
- Chain Lightning: enemies killed with lightning stacks on them chain lightning to nearby enemies. Total jump count scales with level; damage scales with total number of enemies caught in the chain. No effect on single targets, get a few levels in this and try it in Okuplok and you'll gib everything on the screen (and your CPU)
- Thunderbolt: capping out the lightning stacks on a target converts all of them into damage (possibly based on a % of its health). Mutually exclusive with Chain Lightning.

## Avoiding infinite recursion

So, say we have a weapon with the Fragmentation upgrade (shots release shrapnel on impact).

It has an OnDamageDealt() handler, called from WorldThingDamaged, which calls Explode() on the puff/projectile in the mode that causes it to spray shrapnel everywhere. As the shrapnel hits the surroundings, it calls WorldThingDamaged again, which spawns more shrapnel...

One way is just to say that OnDamageDealt can't trigger on any of the TFLV_* classes, and then tell it to use TFLV_ShrapnelPuff as the puff type or something -- but I think if we call Explode() in non-shrapnel mode the puff is the originator?

Probably what we need to do is repurpose some kind of flag and set it on actors as we process them, and other actors that we spawn?

Possibilities:
DONTMORPH (cannot be Polymorphed)
NOTDMATCH (don't spawn in deathmatch games)
INCOMBAT (strife flag used for the dialogue system)

Ended up going with +INCOMBAT, but that's an imperfect solution if we want *different* upgrades to be able to chain off each other, e.g. the fragments from fragmentation shots applying poison; we may want a way to restrict *which* upgrades individual upgrades can trigger, with a default that blocks recursion but not non-recursive chaining -- say, if an actor has the name TFLV::Upgrade::Foo:Aux, it can't trigger anything in TFLV::Upgrade::Foo but other stuff in the Upgrade namespace is fair game.

Better idea: use the `master` pointer in auxes and dots -- basically anything we'd set +INCOMBAT on -- to point to the upgrade that created it. Then we can assign a priority to each upgrade and only higher-priority ones can trigger lower-priority effects.

At the moment, this probably means that ExplosiveDeath, ExplosiveShots, and FragmentationShots are PRI_SECONDARY_DAMAGE or so, and all the elemental upgrades are PRI_ELEMENTAL, which is lower.

Then in UpgradeBag event handlers, rather than checking +INCOMBAT, we check if the master point is set and castable to upgrade; if so, we compare its priority to the priority of the upgrade we're about to trigger.

This runs into a problem: the `master` field can only point to actors, not objects. We need a different field we can re-use to store priority, probably a uint or int. Plausible fields:
- score -- probably safe since these aren't ScoreItems or players
- activationtype -- should only be relevant for activateables
- accuracy/stamina -- only used by Strife players, I think
- special1/special2 -- used by various special attack scripts on monsters, should be safe on non-monsters -- can't set these in properties though

## OnApply() based mods

This is stuff like knockback, increased health, etc that requires making a permanent change to the player or the weapon.
For these, we record a separate level and applied_level and default the latter to 0.
In OnApply(), we figure out how much is currently applied based on the applied_level, then apply the difference between that and the current level.

## Damage calculation stuff

So, when the player damages a monster:
- ModifyDamage() for prior inventory items runs;
- then ModifyDamage() for all player upgrades in the order they were acquired;
- then ModifyDamage() for all weapon upgrades, in the order the player got them;
- then ModifyDamage() for all subsequent inventory items.

The value returned from that is the actual outgoing damage, which is then applied (subject to target resistances and whatnot).
Once the damage is applied, the OnDamageDealt handlers run:

- OnDamageDealt() for all player upgrades;
- then OnDamageDealt() for all weapon upgrades.

OnDamageDealt() has no idea what the original outgoing damage was, or even the value after all the ModifyDamage() checks run; it only gets the final damage actually dealt to the target. This is fine most of the time -- we want to apply stacks, etc based on the actual damage done.

Where it gets weird is when we're doing stuff in ModifyDamage based on the attack damage. Infernal Forge and +Damage are both actual damage modifiers, but with the Beam upgrade we want to do stuff in ModifyDamage to cancel out the attack and replace it with a beam attack.

We could instead do it in OnDamageDealt and cancel out the damage by giving the target health, but this might make the scoring weird.
